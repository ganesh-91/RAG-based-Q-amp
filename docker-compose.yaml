version: "3.8"

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper
    healthcheck:
      test:
        ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 | grep 'Mode'"]
      interval: 10s
      timeout: 5s
      retries: 5

  python-backend:
    build: ./backend/python-rag-app
    container_name: python-backend
    ports:
      - "8000:8000"
    environment:
      KAFKA_BROKER: kafka:9092
      POSTGRES_URL: postgresql+psycopg2://postgres:1234@postgres:5432/rag_db
      HUGGINGFACEHUB_API_TOKEN: <YOUR_HUGGINGFACE_KEY_HERE>  # Replace with your actual Hugging Face API key
      KAFKA_INGEST_TOPIC: ingestion-trigger
      KAFKA_COMPLETED_TOPIC: ingestion-completed
      WAIT_HOSTS: kafka:9092,zookeeper:2181,postgres:5432
      WAIT_HOSTS_TIMEOUT: 300
    depends_on:
      - kafka
      - zookeeper
      - postgres
    command: sh -c "/wait && alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  nestjs-backend:
    build: ./backend/nest-auth-app
    container_name: nestjs-backend
    ports:
      - "3001:3001"
    environment:
      KAFKA_INGEST_TOPIC: "ingestion-trigger"
      KAFKA_COMPLETED_TOPIC: "ingestion-completed"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: 1234
      DB_DATABASE: rag_db
      KAFKA_BROKER: kafka:9092
      APP_SECRET: 0dd8d1d7c673300e0e800e10e13eb6ee1414c140e046ebf7e2229010ab7ab79a10f06fddeebabfb428b6a380aa12654c
      WAIT_HOSTS: kafka:9092,zookeeper:2181,postgres:5432
      WAIT_HOSTS_TIMEOUT: 300
    depends_on:
      - kafka
      - zookeeper
      - postgres
    command: sh -c "/wait && npm run start"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  react-frontend:
    build: ./frontend
    container_name: react-frontend
    ports:
      - "3000:3000"
    depends_on:
      - nestjs-backend
    environment:
      WAIT_HOSTS: nestjs-backend:3001
      WAIT_HOSTS_TIMEOUT: 300
    command: sh -c "/wait && npm start"

  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: rag_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rag_db"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  kafka_data:
  zookeeper_data:
  postgres_data:
